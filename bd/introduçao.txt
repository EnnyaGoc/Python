DQL - linguagem de consulta de dados
    SELECT

DML - linguagem de manipulaçao de dados
    INSERT, UPDATE, DELETE

DDL - linguagem de definiçao de dados
    CREATE, ALTER, DROP

DCL - linguagem de controle de dados
    GRANT, REVOKE

DTL - linguagem de transaçao de dados
    BEGIN, COMMITE, ROLLBACK



https://app.quickdatabasediagrams.com/#/


--------------------------------------------------------------------



        CREATE

CREATE TABLE usuarios (
    id INT,
    nome VARCHAR(255) NOT NULL COMMENT 'Nome do usuário',
    email VARCHAR(100) NOT NULL UNIQUE COMMENT 'Email do usuario',
    endereco VARCHAR(50) NOT NULL COMMENT 'Endereço do usuario',
    data_nascimento DATE NOT NULL COMMENT 'Data de nascimento do usuario'
);



viagens é o database

CREATE TABLE viagens.destinos (
    id INT,
    nome VARCHAR(255) NOT NULL COMMENT 'Nome do destino',
    descricao VARCHAR(100) NOT NULL COMMENT 'Descriçao do usuario'
);


CREATE TABLE viagens.reservas (
    id INT COMMENT 'Identificador unico da reserva',
    id_usuario INT COMMENT 'Referencia ao ID do usuario q fez a reserva',
    id_destino INT COMMENT 'Referencia ao ID do destino da reserva',
    data DATE COMMENT 'Data da reserva',
    status VARCHAR(255) DEFAULT 'pendente' COMMENT 'Status da reserva(confirmada, pendende, cancelada, etc)'
);



        INSERT

INSERT INTO viagens.usuarios (id, nome, email, data_nascimento, endereco) VALUES 
(1, 'João Silva', 'joao@example.com', '1990-05-15', 'Rua A, 123, Cidade X, Estado Y'),
(1, 'Ana', 'teste@teste.com', '1998-02-10', 'Avenida C, 789, Cidade X, Estado Y'),
(2, 'Maria Santos', 'maria@example.com', '1985-08-22', 'Rua B, 456, Cidade Y, Estado Z'),
(3, 'Pedro Souza', 'pedro@example.com', '1998-02-10', 'Avenida C, 789, Cidade X, Estado Y');


INSERT INTO viagens.destinos (id, nome, descricao) VALUES 
(1, 'Praia das Tartarugas', 'Uma bela praia com areias brancas e mar cristalino'),
(2, 'Cachoeira do Vale Verde', 'Uma cachoeira exuberante cercada por natureza'),
(3, 'Cidade Histórica de Pedra Alta', 'Uma cidade rica em história e arquitetura'),
(4, 'Praia do Rosa', 'Uma bela praia com areias brancas e mar cristalino');


INSERT INTO viagens.reservas (id, id_usuario, id_destino, data, status) VALUES 
(1, 1, 2, '2023-07-10', 'confirmada'),
(2, 2, 1, '2023-08-05', 'pendente'),
(3, 3, 3, '2023-09-20', 'cancelada');



        SELECT

-- Selecionar todos os registros da tabela "usuarios"
SELECT * FROM usuarios;


-- Selecionar apenas o nome e o email dos usuários
SELECT nome, email FROM usuarios;


-- Selecionar os usuários que possuem o nome "João Silva"
SELECT * FROM usuarios WHERE nome = 'João Silva';


-- Selecionar os usuários que nasceram antes de uma determinada data
SELECT * FROM usuarios WHERE data_nascimento < '1990-01-01';


-- Like
SELECT * FROM usuarios WHERE nome LIKE '%Silva%';
SELECT * FROM usuarios WHERE nome LIKE 'Jo_o%';



        UPDATE

UPDATE usuarios
SET id = 4
WHERE email = "teste@teste.com";



        DELETE

DELETE FROM destinos
WHERE nome = "Praia do Rosa";



        ALTER TABLE

Mudando os dados(jeito mais dificil)
* Migrando os dados de uma tabela para outra

    - Criando a tabela
CREATE TABLE usuarios_nova (
    id INT,
    nome VARCHAR(255) NOT NULL COMMENT 'Nome do usuário',
    email VARCHAR(100) NOT NULL UNIQUE COMMENT 'Email do usuario',
    endereco VARCHAR(100) NOT NULL COMMENT 'Endereço do usuario',
    data_nascimento DATE NOT NULL COMMENT 'Data de nascimento do usuario'
);

    - Passando os dados
INSERT INTO usuarios_nova (id, nome, email, data_nascimento, endereco) 
SELECT id, nome, email, data_nascimento, endereco
FROM usuarios;

    - Excluindo a antiga( DROP TABLE - exclui a tabela permanentemente)
DROP TABLE usuarios;

    - Renomeando a nova
ALTER TABLE usuarios_nova RENAME usuarios;



Mudando os dados(jeito mais simples)
* Alterando o tipo da coluna

ALTER TABLE usuarios MODIFY COLUMN endereco VARCHAR(150);



----------------------------------------------------------------------





CHAVE PRIMÁRIA 

- Transformando o id em chave primária
ALTER TABLE usuarios
MODIFY COLUMN id INT AUTO_INCREMENT,
ADD PRIMARY KEY (ID);

ALTER TABLE destinos
MODIFY COLUMN id INT AUTO_INCREMENT,
ADD PRIMARY KEY (ID);

ALTER TABLE reservas
MODIFY COLUMN id INT AUTO_INCREMENT,
ADD PRIMARY KEY (ID);




CHAVE ESTRANGEIRA

ALTER TABLE reservas
ADD CONSTRAINT fk_reservas_usuarios 
FOREIGN KEY(id_usuario) REFERENCES usuarios(id);

ALTER TABLE reservas
ADD CONSTRAINT fk_reservas_destinos
FOREIGN KEY(id_destino) REFERENCES destinos(id);



Para definir oq acontece com os filhos
ON DELETE
ON UPDATE
CASCADE, SET NULL, SET DEFAULT

ALTER TABLE reservas
ADD CONSTRAINT fk_usuarios 
FOREIGN KEY(id_usuario) REFERENCES usuarios(id)
ON DELETE CASCADE;


DELETE FROM usuarios WHERE id = 1;

(se excluiu o usuario com id 1, a reserva dele tb vai ser excluída)







----------------------------------------------------------------------







        NORMALIZAÇÃO DE DADOS

1FN: Valor tem q ser atomico

ALTER TABLE usuarios
ADD rua VARCHAR(100),
ADD numero VARCHAR(10),
ADD cidade VARCHAR(50),
ADD estado VARCHAR(20);


UPDATE usuarios
SET rua = SUBSTRING_INDEX(SUBSTRING_INDEX(endereco, ',', 1), ',', -1),
    numero = SUBSTRING_INDEX(SUBSTRING_INDEX(endereco, ',', 2), ',', -1),
    cidade = SUBSTRING_INDEX(SUBSTRING_INDEX(endereco, ',', 3), ',', -1),
    estado = SUBSTRING_INDEX(endereco, ',', -1);


ALTER TABLE usuarios
DROP COLUMN endereco;




2FN: Atributos n chave tem q depender apenas da chave primaria
Se n tiver uma chave primária composta, já esta normalizada


3FN: Nhma coluna n chave pode depender de outra coluna n chave





--------------------------------------------------------------------



        JOINS

INNER JOIN: linhas q aparecem nas 2 tabelas

SELECT * FROM usuarios us
INNER JOIN reservas rs ON us.id = rs.id_usuario
INNER JOIN destinos ds ON us.id_destino = rs.id;


INSERT INTO usuarios (nome, email, data_nascimento, rua, cidade, estado) VALUES ("sem reservas", "dioa@teste.com", "2005-04-02", "rua", "12", "cidade", "estado");

SELECT * FROM usuarios us
INNER JOIN reservas rs ON us.id = rs.id_usuario;




LEFT JOIN: linhas q aparecem nas 2 tabelas e q aparecem só na tabela esquerda

SELECT * FROM usuarios us
LEFT JOIN reservas rs ON us.id = rs.id_usuario;




RIGHT JOIN: linhas q aparecem nas 2 tabelas e q aparecem só na tabela direita

INSERT INTO destinos (nome, descricao) VALUES ("Destino sem reservas", "Descricao");


SELECT * FROM reservas rs
RIGHT JOIN destinos ds
ON rs.id_destino = ds.id



FULL JOIN: Pega td


SUB CONSULTAS: SELECT, FROM, WHERE, HAVING, JOIN.

SELECT * FROM destinos
WHERE id NOT IN (SELECT id_destino FROM reservas);


SELECT * FROM usuarios
WHERE id NOT IN (SELECT id_usuario FROM reservas);


SELECT nome, (SELECT COUNT(*) FROM reservas WHERE id_usuario = usuarios.id) AS total_reservas FROM usuarios;





---------------------------------------------------------------------

        FUNÇOES AGREGADAS
COUNT
SUM
AVG
MIN
MAX


SELECT COUNT(*) AS total_usuarios FROM usuarios;


SELECT COUNT(*) AS total_usuarios FROM usuarios us
INNER JOIN reservas rs ON us.id = rs.id_usuario;




SELECT MAX(TIMESTAMPDIFF(YEAR, data_nascimento, CURRENT_DATE())) AS maior_idade FROM usuarios;

TIMESTAMPDIFF - realiza a diferença de uma data e outra
CURRENT_DATE() - traz a data do servidor do banco


        AGRUPAMENTO DE RESULTADOS
GROUP BY

SELECT COUNT(*), id_destino FROM reservas
GROUP BY id_destino;


        ORDENAÇAO DE RESULTADOS
ORDER BY

SELECT COUNT(*) AS qtd_reservas, id_destino FROM reservas
GROUP BY id_destino
ORDER BY qtd_reservas;




---------------------------------------------------------------------

        ÍNDICES


INSERT INTO usuarios (nome, email, data_nascimento, rua) VALUES
('João Silva', 'joao.silva@example.com', '1990-01-01', 'Rua A'),
('Maria Santos', 'maria.santos@example.com', '1992-03-15', 'Rua B'),
('Pedro Almeida', 'pedro.almeida@example.com', '1985-07-10', 'Rua C'),
('Ana Oliveira', 'ana.oliveira@example.com', '1998-12-25', 'Rua D'),
('Carlos Pereira', 'carlos.pereira@example.com', '1991-06-05', 'Rua E'),
('Laura Mendes', 'laura.mendes@example.com', '1994-09-12', 'Rua F'),
('Fernando Santos', 'fernando.santos@example.com', '1988-02-20', 'Rua G'),
('Mariana Costa', 'mariana.costa@example.com', '1997-11-30', 'Rua H'),
('Ricardo Rodrigues', 'ricardo.rodrigues@example.com', '1993-04-18', 'Rua I'),
('Camila Alves', 'camila.alves@example.com', '1989-08-08', 'Rua J'),
('Bruno Carvalho', 'bruno.carvalho@example.com', '1995-03-25', 'Rua K'),
('Amanda Silva', 'amanda.silva@example.com', '1996-12-02', 'Rua L'),
('Paulo Mendonça', 'paulo.mendonca@example.com', '1999-07-20', 'Rua M'),
('Larissa Oliveira', 'larissa.oliveira@example.com', '1987-10-15', 'Rua N'),
('Fernanda Sousa', 'fernanda.sousa@example.com', '1992-05-08', 'Rua O'),
('Gustavo Santos', 'gustavo.santos@example.com', '1993-09-18', 'Rua P'),
('Helena Costa', 'helena.costa@example.com', '1998-02-22', 'Rua Q'),
('Diego Almeida', 'diego.almeida@example.com', '1991-11-27', 'Rua R'),
('Juliana Lima', 'juliana.lima@example.com', '1997-04-05', 'Rua S'),
('Rafaela Silva', 'rafaela.silva@example.com', '1996-01-10', 'Rua T'),
('Lucas Pereira', 'lucas.pereira@example.com', '1986-08-30', 'Rua U'),
('Fábio Rodrigues', 'fabio.rodrigues@example.com', '1989-03-12', 'Rua V'),
('Isabela Santos', 'isabela.santos@example.com', '1994-12-07', 'Rua W'),
('André Alves', 'andre.alves@example.com', '1995-09-28', 'Rua X'),
('Clara Carvalho', 'clara.carvalho@example.com', '1990-02-15', 'Rua Y'),
('Roberto Mendes', 'roberto.mendes@example.com', '1992-07-21', 'Rua Z'),
('Mariana Oliveira', 'mariana.oliveira@example.com', '1997-05-03', 'Av. A'),
('Gustavo Costa', 'gustavo.costa@example.com', '1998-11-16', 'Av. B'),
('Lara Sousa', 'lara.sousa@example.com', '1993-06-09', 'Av. C'),
('Pedro Lima', 'pedro.lima@example.com', '1996-09-27', 'Av. D');






        ANÁLISE DO PLANO DE EXECUÇAO
EXPLAIN


EXPLAIN 
    SELECT * FROM usuarios WHERE email = "joao.silva@example.com";


EXPLAIN 
    SELECT * FROM usuarios WHERE nome = "João Silva";




        ÍNDICES DE BUSCA
CREATE INDEX

CREATE INDEX idx_nome ON usuarios (nome);





DJANGO COM PYTHON
















